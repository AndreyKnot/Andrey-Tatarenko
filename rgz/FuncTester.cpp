/**
* @file FuncTester.cpp
* Файл реалізації методів класу-тестера
* @author Tatarenko Andrey
* @date 2020.06.16
* @version 1.0
*/

#include "FuncTester.h"						/** Підключення файлу FuncTester.h */

void FuncTester::Add_Test()					/** Реалізація тестування метода додавання студента */
{
	if (value.AddStudent(2) == 11)			/** Виклик метода додавання студента */
		cout << "Тест функции добавления студента\t выполнен успешно." << endl;
	else
		cout << "Тест функции добавления студента\t не выполнен успешно." << endl;
}

void FuncTester::Delete_Test()				/** Реалізація тестування метода видалення студента */
{
	if (value.DeleteStudent(5) == 10)		/** Виклик метода видалення студента */
		cout << "Тест функции удаления студента\t\t выполнен успешно." << endl;
	else
		cout << "Тест функции удаления студента\t\t не выполнен успешно." << endl;
}

void FuncTester::ReadFile_Test()			/** Реалізація тестування метода читання даних з файлу */
{
	if (value.ReadFile("data.txt") == 5)		/** Виклик метода читання даних з файлу */
		cout << "Тест функции чтения файла\t\t выполнен успешно." << endl;
	else
		cout << "Тест функции чтения из файла\t\t не выполнен успешно." << endl;
}

void FuncTester::SaveFile_Test()			/** Реалізація тестування метода виведення даних у файл */
{
	if (value.SaveFile("Test.txt") == 10)	/** Виклик метода виведення даних у файл */
		cout << "Тест функции сохранения в файл\t\t выполнен успешно." << endl;
	else
		cout << "Тест функции сохранения в файл\t\t не выполнен успешно." << endl;
}

void FuncTester::Sort_Test()				/** Реалізація тестування метода сортування */
{
	Functor funct(1, 2);					/** Створення елемента класу Functor */
	int beforeSort = value.get_numb(0);
	value.Sort(funct);						/** Виклик метода сортування */
	int afterSort = value.get_numb(0);

	if (beforeSort != afterSort && afterSort > value.get_numb(2))
		cout << "Тест функции сортировки списка\t\t выполнен успешно." << endl << endl;
	else
		cout << "Тест функции сортировки списка\t\t не выполнен успешно." << endl << endl;
}

void FuncTester::Task_Test()				/** Реалізація тестування метода реалізації індивідуального завдання */
{
	if (value.Task() == 8)				/** Виклик метода реалізації індивідуального завдання */
		cout << endl << "Тест функции индивидуального задания\t выполнен успешно." << endl;
	else
		cout << endl << "Тест функции индивидуального задания\t не выполнен успешно." << endl;
}

FuncTester::FuncTester() {}					/** Реалізація конструктора за замовчуванням */
FuncTester::~FuncTester() {}				/** Реалізація деструктора */